//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.monitoring.service ;

use com.ibm.streamsx.monitoring.metrics::MetricsMonitor ;
use com.ibm.streamsx.monitoring.metrics::* ;
use com.ibm.streamsx.topology.topic::Subscribe ;
use com.ibm.streamsx.topology.topic::Publish ;
use com.ibm.streamsx.json::* ;

/**
 * The MetricsMonitorService ingests metric tuples from the MetricsIngestService and 
 * monitors the metric values against the threshold rules defined in the application 
 * configuration's thresholdDocument property.
 * 
 * Once a threshold is violated, an alert message is sent out, containing the details 
 * on the current metric value, the threshold rule that Was triggered. It also includes 
 * more details on the metric (from the tuple).
 * 
 * This composite depends on the following toolkits:
 * * **com.ibm.streamsx.topology**
 * * **com.ibm.streamsx.json**
 * 
 * @param applicationConfigurationName
 * Name of application configuration containing thresholdDocument JSON.
 * If parameter is not set, then the thresholdDocument parameter must be set.
 * 
 * @param thresholdDocument
 * Specifies the path to a JSON-formatted document. If the **applicationConfigurationName** parameter is specified, the application configuration can override this parameter value.
 * If parameter is not set, then the applicationConfigurationName parameter must be set. 
 * 
 * @param ingestTopic
 * The ingestTopic specifies which topic the MetricsSourceService is publishing to. If parameter is not set, then the topic name `streamsx/monitoring/metrics/values` is used.
 * 
 * @param metricsMonitorTopic
 * The metricsMonitorTopic specifies which topic this service (MetricsMonitorService) is publishing to.
 */
public composite MetricsMonitorService
{
	param
		expression<rstring> $applicationConfigurationName : getSubmissionTimeValue("applicationConfigurationName", ""); // uses thresholdDocument, if not set		
		expression<rstring> $thresholdDocument: getSubmissionTimeValue("thresholdDocument", ""); // uses applicationConfiguration, if not set
		
		expression<rstring> $ingestTopic : getSubmissionTimeValue("ingestTopic", "streamsx/monitoring/metrics/values");
		expression<rstring> $metricsMonitorTopic : getSubmissionTimeValue("metricsMonitorTopic", "streamsx/monitoring/metrics/alerts");
		
	graph
		/**
		 * The Subscribe imports the metric tuples JSON from the topic the MetricsSourceService's 
		 * is publishing to.
		 */
		stream<Json> JsonMetrics = Subscribe() {
			param
				topic: $ingestTopic;
				streamType: Json;
		}
		
		/** The JSONToTuple converts the JSON back into Metrics tuples.		
		*/
		stream<Notification> Metrics = JSONToTuple(JsonMetrics) {
		}

		/**
		 * The MetricsMonitor compares the metric tuple's values against the threshold rules 
		 * defined in the application configuration's thresholdDocument property. It outputs 
		 * an alert whenever any threshold rules are violated.
		 */
		stream<rstring message> AlertMessage = MetricsMonitor(Metrics) {
			param
				applicationConfigurationName: $applicationConfigurationName;
				thresholdDocumentPath: $thresholdDocument;
		}
		
		/** The TupleToJSON converts the alert message into JSON to prepare it for publishing.		
		*/
		stream<Json> JsonMessage = TupleToJSON(AlertMessage) {
		}

		/**
		 * The Publish publishes the alert messsages to the user-defined topic (default: 'streamsx/monitoring/metrics/alerts').
		 */
		() as PublishMetricsMonitor = Publish(JsonMessage) {
			param
				 topic: $metricsMonitorTopic;
		}

}



