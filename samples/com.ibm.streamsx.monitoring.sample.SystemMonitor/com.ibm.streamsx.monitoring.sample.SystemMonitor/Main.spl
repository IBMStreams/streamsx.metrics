namespace com.ibm.streamsx.monitoring.sample.SystemMonitor;

use com.ibm.streamsx.monitoring.system::* ;

/** 
* This sample SPL application demonstrates the use of SystemMonitorSource operator 
* to get the CPU and Memory usage from the current running system.
*/
composite Main
{
    param
        /**
         * The parameter specifies "period" the time interval between two requests in second. 
         */
        expression<int32> $period :(int32) getSubmissionTimeValue("period", "3") ;
        /*
         * The status attribute contains addtional information retrieved from top command if the detail parameter is set to true.
         * Otherwise the status attribute contains the date and time only.
         */
        expression<boolean> $detail :(boolean) getSubmissionTimeValue("detail", "false") ;
        /**
         * Set to false if you want to disable that tuples are sent to FileSink.
         */
        expression<boolean> $logToFile :(boolean) getSubmissionTimeValue("logToFile", "true") ;
        /**
         * This parameter is used to specify the maximum number of tuples per file.
         */
        expression<uint32> $tuplesPerFile :(uint32) getSubmissionTimeValue("tuplesPerFile", "1000") ;

    graph

        /** 
         * The SystemMonitor operator delivers the CPU and Memory usage 
         * from the current running system.        
         */
        stream<SystemStatus> SysMon = SystemMonitorSource() {
            param
                period : $period;
                detail : $detail;
        }

        /** 
         * The Custom operator printLogs 
         * - writes the results in the console log
         * - adds header to result after n tuples per file.
         * - forward the results to the next Stream (FileSink) 
         */
        stream<rstring result2> printLogs = Custom(SysMon) {
            logic
                state : {
                    mutable int32 i = 0;
                    mutable rstring headerLine =
                        "Date and time , CPU usage % , Memory usage (%) , Memory total (KB) , Memory used (KB)" ;
                    mutable rstring result = "";
                }

                onTuple SysMon: {
                   result = status + " , " +(rstring) cpuUsage + " , " +(rstring) memUsage 
                                + " , " +(rstring)memTotal + " , " +(rstring) memUsed;
                    if (i == 0) {
                        result = headerLine + "\n" + result;
                        // add header to result
                    }
                    // Dumps the results to the console log.
                    printStringLn(result);
                    i ++;
                    if(i ==(int32) $tuplesPerFile) {
                        i = 0;
                    }
                    if ($logToFile) {
                    	submit({ result2 = result }, printLogs);
                    }
                }
        }

        /** 
         * Creates a series of files that have the current time and the id number embedded 
         * in the filename: 
         * This parameter "tuplesPerFile" is used to specify the maximum number of tuples 
         * that can be received for each output file. When the specified number of tuples 
         * are received, the current output file is closed and a new file is opened for writing. 
         * flush the log file after 1 tuple 
         */
        () as LogSink = FileSink(printLogs) {
            param
                file : "/tmp/system-monitor_{localtime:%Y.%m.%d-%H-%M-%S}_{id}.log";
                format : line;
                tuplesPerFile : $tuplesPerFile;
                flush : 1u;
                closeMode : count;
        }

}





