//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.monitoring.jobs.sample;

use com.ibm.streamsx.monitoring.jobs::*;

/**
 * This sample application demonstrates the usage of the [com.ibm.streamsx.monitoring::JobStatusMonitor]
 * operator and monitors all jobs and reports the Job/PE status events.
 */
composite Monitor {

	param
		expression<rstring> $applicationConfigurationName: getSubmissionTimeValue("applicationConfigurationName", ""); // optional, if user and password are set
		expression<rstring> $user: getSubmissionTimeValue("user", ""); // optional, if set in application configuration
		expression<rstring> $password: getSubmissionTimeValue("password", ""); // optional, if set in application configuration
		expression<rstring> $filterDocument: getSubmissionTimeValue("filterDocument", ""); // uses default, if not set
		expression<rstring> $connectionURL: getSubmissionTimeValue("connectionURL", ""); // optional, if not set, then domain settings are used, where the PE is running
		expression<rstring> $domainId: getSubmissionTimeValue("domainId", ""); // optional, if not set, then domain settings are used, where the PE is running
		expression<rstring> $sslOption: getSubmissionTimeValue("sslOption", ""); // optional, if not set, then domain settings are used, where the PE is running

	graph

		/*
		 * The JobStatusMonitor generates a tuple for each notified PE status change.
		 */
		stream<JobStatusNotification> ChangeNotifications as O = JobStatusMonitor() {
			param
				applicationConfigurationName: $applicationConfigurationName;
				user: $user;
				password: $password;
				filterDocument: $filterDocument;
				connectionURL: $connectionURL;
				domainId: $domainId;
				sslOption: $sslOption;				
		}

		/*
		 * The Custom traces the received notifications.
		 */
		() as ChangeNotificationTracer = Custom(ChangeNotifications as I) {
			logic
			onTuple I: {
				printStringLn((rstring)I);
			}
		}



}
