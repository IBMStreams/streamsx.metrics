//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

use com.ibm.streamsx.monitoring.metrics::*;
use com.ibm.streamsx.monitoring.jmx::ConnectionNotification;

/**
 * This application tests the JMX reconnect in MetricsSource operator
 *
 * @param user
 * Specifies the user that is required for the JMX connection. If the **applicationConfigurationName** parameter is specified, the application configuration can override this parameter value.
 *
 * @param password
 * Specifies the password that is required for the JMX connection. If the **applicationConfigurationName** parameter is specified, the application configuration can override this parameter value.
 *
 * @param connectionURL
 * Specifies the connection URL as returned by the `streamtool getjmxconnect` command. If the **applicationConfigurationName** parameter is specified, the application configuration can override this parameter value.If not specified and the domainId parameter value equals the domain id under which this operator is running, then the operator uses the `streamtool getjmxconnect` command to get the value.
 *
 * @param domainId
 * Specifies the domain id that is monitored. If no domain id is specified, the domain id under which this operator is running is used. If the **applicationConfigurationName** parameter is specified, the application configuration can override this parameter value.
 *
 * @param sslOption
 * Specifies the sslOption that is required for the JMX connection. If the **applicationConfigurationName** parameter is specified, the application configuration can override this parameter value. If not specified and the domainId parameter value equals the domain id under which this operator is running, then the operator uses the `streamtool getdomainproperty` command to get the value.
 *
 */
composite Monitor {
	param
		expression<rstring> $user: getSubmissionTimeValue("user", ""); // optional, if set in application configuration
		expression<rstring> $password: getSubmissionTimeValue("password", ""); // optional, if set in application configuration
		expression<rstring> $connectionURL: getSubmissionTimeValue("connectionURL", ""); // optional, if not set, then domain settings are used, where the PE is running
		expression<rstring> $domainId: getSubmissionTimeValue("domainId", ""); // optional, if not set, then domain settings are used, where the PE is running
		expression<rstring> $sslOption: getSubmissionTimeValue("sslOption", ""); // optional, if not set, then domain settings are used, where the PE is running

	graph

		(stream<Notification> MetricNotifications; stream<ConnectionNotification> ConnectionNotifications
		) = MetricsSource() {
			param
				user: $user;
				password: $password;
				filterDocument: getThisToolkitDir()+"/etc" + "/MetricsSource_MonitorEverything.json";
				connectionURL: $connectionURL;
				domainId: $domainId;
				sslOption: $sslOption;
				emitMetricTuple: onChangedValue;
		}
		
		/*
		 * Verify the received notifications.
		 */
		(stream <rstring result> SaveDone1; stream <rstring result> SaveDone2) as NotificationTracer = Custom(MetricNotifications as I; ConnectionNotifications as C) {
			logic 
			state: {
				mutable boolean done1Sent = false;
				mutable boolean done2Sent = false;
				mutable boolean receivedConnectionNotification = false;
			}
			onTuple I: {
				printStringLn((rstring)I);
				if ((I.metricName=="nTuplesSubmitted") && (-1 != findFirst(I.operatorName, "AnnotatedSource", 0))) {
					if (!done1Sent) {
						submit({result="TEST_RESULT_PASS"}, SaveDone1);
						submit(Sys.WindowMarker, SaveDone1);
						done1Sent = true;
					}
					if ((!done2Sent) && (receivedConnectionNotification)) {
						submit({result="TEST_RESULT_PASS"}, SaveDone2);
						submit(Sys.WindowMarker, SaveDone2);
						done2Sent = true;
					}
				}
			}
			onTuple C: {
				printStringLn((rstring)C);
				// expect ConnectionNotification when domain is stopped and JMX connections is closed
				receivedConnectionNotification = true;
			}
		}
		
		() as Done1 = FileSink(SaveDone1 as I) {
			param file: "done_1"; format: csv; flush: 1u; quoteStrings : false; writePunctuations: false; closeMode: punct; moveFileToDirectory: dataDirectory()+"/..";
		}

		() as Done2 = FileSink(SaveDone2 as I) {
			param file: "done_2"; format: csv; flush: 1u; quoteStrings : false; writePunctuations: false; closeMode: punct; moveFileToDirectory: dataDirectory()+"/..";
		}


}
